<?xml version="1.0" encoding="UTF-8"?>
<api context="/acervobiblioteca" name="AcervoBibliotecaAPI" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="GET" uri-template="/polos">
        <inSequence>
            <log description="Incoming Request Log" level="custom">
                <property name="message" value="Get Polos"/>
            </log>
            <property description="URL Fix" name="REST_URL_POSTFIX" scope="axis2" type="STRING" value=""/>
            <payloadFactory description="Polos" media-type="json">
                <format>
					[&#xd;
					{&#xd;
					"name":"$1",&#xd;
					"apiUrl":"$2"&#xd;
					},&#xd;
					{&#xd;
					"name":"$3",&#xd;
					"apiUrl":"$4"&#xd;
					},&#xd;
					{&#xd;
					"name":"$5",&#xd;
					"apiUrl":"$6"&#xd;
					}&#xd;
					]
                </format>
                <args>
                    <arg value="Polo1"/>
                    <arg value="/polo1"/>
                    <arg value="Polo2"/>
                    <arg value="/polo2"/>
                    <arg value="Polo3"/>
                    <arg value="/polo3"/>
                </args>
            </payloadFactory>
            <respond description="Respond"/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <store messageStore=""/>
            <payloadFactory description="Payload Error" media-type="json">
                <format>
					{&#xd;
					"message":$1,&#xd;
					"code":$2,&#xd;
					"detail":$3,&#xd;
					"exception":$4&#xd;
					}
                </format>
                <args>
                    <arg evaluator="xml" expression="$ctx:ERROR_MESSAGE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_CODE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_DETAIL"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_EXCEPTION"/>
                </args>
            </payloadFactory>
            <respond description="Respond Error"/>
        </faultSequence>
    </resource>
    <resource methods="GET" uri-template="/areasconhecimento">
        <inSequence>
            <log description="Incoming Request Log" level="custom">
                <property name="message" value="Get Areas Conhecimento"/>
            </log>
            <property description="URL Fix" name="REST_URL_POSTFIX" scope="axis2" type="STRING" value=""/>
            <clone>
                <target sequence="Polo1AreasConhecimentoSequence"/>
                <target sequence="Polo3AreasConhecimentoSequence"/>
            </clone>
        </inSequence>
        <outSequence>
            <property name="enclosing_element" scope="default">
                <result xmlns=""/>
            </property>
            <aggregate>
                <completeCondition>
                    <messageCount max="-1" min="-1"/>
                </completeCondition>
                <onComplete enclosingElementProperty="enclosing_element" expression="//*[local-name() = 'AreasConhecimento']">
                    <log level="full"/>
                    <payloadFactory description="Remove repeated AreasConhecimento" media-type="json">
                        <format>$1</format>
                        <args>
                            <arg evaluator="xml" expression="//*[local-name()='AreasConhecimento'][not(text()=preceding-sibling::*[local-name()='AreasConhecimento']/text())]"/>
                        </args>
                    </payloadFactory>
                    <payloadFactory description="Get only array" media-type="json">
                        <format>$1</format>
                        <args>
                            <arg evaluator="json" expression="$.AreasConhecimento"/>
                        </args>
                    </payloadFactory>
                    <send/>
                </onComplete>
            </aggregate>
            <payloadFactory description="Get only array" media-type="json">
                <format>
					$1
                </format>
                <args>
                    <arg evaluator="json" expression="$.AreasConhecimento"/>
                </args>
            </payloadFactory>
            <respond description="Respond"/>
        </outSequence>
        <faultSequence>
            <payloadFactory description="Payload Error" media-type="json">
                <format>
					{&#xd;
					"message":$1,&#xd;
					"code":$2,&#xd;
					"detail":$3,&#xd;
					"exception":$4&#xd;
					}
                </format>
                <args>
                    <arg evaluator="xml" expression="$ctx:ERROR_MESSAGE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_CODE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_DETAIL"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_EXCEPTION"/>
                </args>
            </payloadFactory>
            <respond description="Respond Error"/>
        </faultSequence>
    </resource>
    <resource methods="GET" uri-template="/polos/{polo}/obras">
        <inSequence>
            <log description="Incoming Request Log" level="custom">
                <property name="message" value="Get Polo Obras"/>
                <property expression="get-property('uri.var.polo')" name="polo resource identifier"/>
            </log>
            <switch description="Case-Insensitive Switch Matcher for Polos" source="get-property('uri.var.polo')">
                <case regex="([p|P][o|O][l|L][o|O]1)">
                    <sequence key="GetPolo1ObrasSequence"/>
                </case>
                <case regex="([p|P][o|O][l|L][o|O]2)">
                    <sequence key="GetPolo2ObrasSequence"/>
                </case>
                <case regex="([p|P][o|O][l|L][o|O]3)">
                    <sequence key="GetPolo3ObrasSequence"/>
                </case>
                <default>
                    <sequence description="Sequence that handles response properties when a resource is not found" key="ResourceNotFoundSequence"/>
                </default>
            </switch>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <payloadFactory description="Payload Error" media-type="json">
                <format>
					{&#xd;
					"message":$1,&#xd;
					"code":$2,&#xd;
					"detail":$3,&#xd;
					"exception":$4&#xd;
					}
                </format>
                <args>
                    <arg evaluator="xml" expression="$ctx:ERROR_MESSAGE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_CODE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_DETAIL"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_EXCEPTION"/>
                </args>
            </payloadFactory>
            <respond description="Respond Error"/>
        </faultSequence>
    </resource>
    <resource methods="GET" uri-template="/polos/{polo}/obras/{obra}">
        <inSequence>
            <log description="Incoming Request Log" level="custom">
                <property name="message" value="Get Polo Obra"/>
                <property expression="get-property('uri.var.polo')" name="polo resource identifier"/>
                <property expression="get-property('uri.var.obra')" name="obra resource identifier"/>
            </log>
            <switch description="Case-Insensitive Switch Matcher for Polos" source="get-property('uri.var.polo')">
                <case regex="([p|P][o|O][l|L][o|O]1)">
                    <call-template description="GetPolo1ObraCallTemplate" target="GetPolo1ObraSequenceTemplate">
                        <with-param name="obra" value="{get-property('uri.var.obra')}"/>
                    </call-template>
                </case>
                <case regex="([p|P][o|O][l|L][o|O]2)">
                    <call-template description="GetPolo2ObraCallTemplate" target="GetPolo2ObraSequenceTemplate">
                        <with-param name="obra" value="{get-property('uri.var.obra')}"/>
                    </call-template>
                </case>
                <case regex="([p|P][o|O][l|L][o|O]3)">
                    <call-template description="GetPolo3ObraCallTemplate" target="GetPolo3ObraSequenceTemplate">
                        <with-param name="obra" value="{get-property('uri.var.obra')}"/>
                    </call-template>
                </case>
                <default>
                    <loopback/>
                </default>
            </switch>
            <respond/>
        </inSequence>
        <outSequence>
            <sequence key="ResourceNotFoundSequence"/>
            <respond/>
        </outSequence>
        <faultSequence>
            <payloadFactory description="Payload Error" media-type="json">
                <format>
					{&#xd;
					"message":$1,&#xd;
					"code":$2,&#xd;
					"detail":$3,&#xd;
					"exception":$4&#xd;
					}
                </format>
                <args>
                    <arg evaluator="xml" expression="$ctx:ERROR_MESSAGE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_CODE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_DETAIL"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_EXCEPTION"/>
                </args>
            </payloadFactory>
            <respond description="Respond Error"/>
        </faultSequence>
    </resource>
    <resource methods="GET" uri-template="/polos/{polo}/obras/{obra}/states">
        <inSequence>
            <log description="Incoming Request Log" level="custom">
                <property name="message" value="Get Polo Obra States"/>
                <property expression="get-property('uri.var.polo')" name="polo resource identifier"/>
                <property expression="get-property('uri.var.obra')" name="obra resource identifier"/>
            </log>
            <switch description="Case-Insensitive Switch Matcher for Polos" source="get-property('uri.var.polo')">
                <case regex="([p|P][o|O][l|L][o|O]1)">
                    <call-template description="GetPolo1ObraCallTemplate" target="GetPolo1ObraStatesSequenceTemplate">
                        <with-param name="obra" value="{get-property('uri.var.obra')}"/>
                    </call-template>
                </case>
                <case regex="([p|P][o|O][l|L][o|O]2)">
                    <call-template description="GetPolo2ObraCallTemplate" target="GetPolo2ObraStatesSequenceTemplate">
                        <with-param name="obra" value="{get-property('uri.var.obra')}"/>
                    </call-template>
                </case>
                <case regex="([p|P][o|O][l|L][o|O]3)">
                    <call-template description="GetPolo3ObraCallTemplate" target="GetPolo3ObraStatesSequenceTemplate">
                        <with-param name="obra" value="{get-property('uri.var.obra')}"/>
                    </call-template>
                </case>
                <default>
                    <sequence description="Sequence that handles response properties when a resource is not found" key="ResourceNotFoundSequence"/>
                </default>
            </switch>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <payloadFactory description="Payload Error" media-type="json">
                <format>
					{&#xd;
					"message":$1,&#xd;
					"code":$2,&#xd;
					"detail":$3,&#xd;
					"exception":$4&#xd;
					}
                </format>
                <args>
                    <arg evaluator="xml" expression="$ctx:ERROR_MESSAGE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_CODE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_DETAIL"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_EXCEPTION"/>
                </args>
            </payloadFactory>
            <respond description="Respond Error"/>
        </faultSequence>
    </resource>
    <resource methods="GET" uri-template="/fornecedores">
        <inSequence>
            <log description="Incoming Request Log" level="custom">
                <property name="message" value="Get Fornecedores"/>
            </log>
            <property description="URL Fix" name="REST_URL_POSTFIX" scope="axis2" type="STRING" value=""/>
            <payloadFactory description="Fornecedores" media-type="json">
                <format>
					[&#xd;
					{&#xd;
					"name":"$1",&#xd;
					},&#xd;
					{&#xd;
					"name":"$2",&#xd;
					},&#xd;
					{&#xd;
					"name":"$3",&#xd;
					}&#xd;
					]
                </format>
                <args>
                    <arg value="Fornecedor1"/>
                    <arg value="Fornecedor2"/>
                    <arg value="Fornecedor3"/>
                </args>
            </payloadFactory>
            <respond description="Respond"/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <payloadFactory description="Payload Error" media-type="json">
                <format>
					{&#xd;
					"message":$1,&#xd;
					"code":$2,&#xd;
					"detail":$3,&#xd;
					"exception":$4&#xd;
					}
                </format>
                <args>
                    <arg evaluator="xml" expression="$ctx:ERROR_MESSAGE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_CODE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_DETAIL"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_EXCEPTION"/>
                </args>
            </payloadFactory>
            <respond description="Respond Error"/>
        </faultSequence>
    </resource>
    <resource methods="GET" uri-template="/fornecedores/{fornecedor}/obras/{titulo}">
        <inSequence>
            <log description="Incoming Request Log" level="custom">
                <property expression="get-property('uri.var.fornecedor')" name="Fornecedor"/>
                <property expression="get-property('uri.var.titulo')" name="Titulo"/>
            </log>
            <property description="URL Fix" name="REST_URL_POSTFIX" scope="axis2" type="STRING" value=""/>
            <switch description="Case-Insensitive Switch Matcher for Fornecedores" source="get-property('uri.var.fornecedor')">
                <case regex="([f|F][o|O][r|R][n|N][e|E][c|C][e|E][d|D][o|O][r|R]1)"/>
                <case regex="([f|F][o|O][r|R][n|N][e|E][c|C][e|E][d|D][o|O][r|R]2)">
                    <sequence key="Fornecedor2ObraByTituloSequence"/>
                </case>
                <case regex="([f|F][o|O][r|R][n|N][e|E][c|C][e|E][d|D][o|O][r|R]3)">
                    <sequence key="Fornecedor3ObrasByTituloSequence"/>
                </case>
                <default>
                    <sequence description="Sequence that handles response properties when a resource is not found" key="ResourceNotFoundSequence"/>
                    <respond/>
                </default>
            </switch>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <payloadFactory description="Payload Error" media-type="json">
                <format>
					{&#xd;
					"message":$1,&#xd;
					"code":$2,&#xd;
					"detail":$3,&#xd;
					"exception":$4&#xd;
					}
                </format>
                <args>
                    <arg evaluator="xml" expression="$ctx:ERROR_MESSAGE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_CODE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_DETAIL"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_EXCEPTION"/>
                </args>
            </payloadFactory>
            <respond description="Respond Error"/>
        </faultSequence>
    </resource>
    <resource methods="POST" url-mapping="/notification">
        <inSequence>
            <log description="Incoming Request Log" level="custom">
                <property name="message" value="Send Notification"/>
            </log>
            <property expression="json-eval($.notificationChannel)" name="notification-channel" scope="default" type="STRING"/>
            <switch source="get-property('notification-channel')">
                <case regex="([e|E][m|M][a|A][i|I][l|L])">
                    <sequence key="SendEmailSequence"/>
                </case>
                <case regex="([s|S][m|M][s|S])">
                    <sequence key="ResourceNotFoundSequence"/>
                    <payloadFactory description="Payload Error" media-type="json">
                        <format>
							{&#xd;
							"message":"$1",&#xd;
							"detail":"$2"&#xd;
							}
                        </format>
                        <args>
                            <arg value="Not Implemented yet"/>
                            <arg evaluator="xml" expression="fn:concat('Notification channel ', $ctx:notification-channel, ' is not implemented')"/>
                        </args>
                    </payloadFactory>
                </case>
                <default>
                    <sequence key="ResourceNotFoundSequence"/>
                    <payloadFactory description="Payload Error" media-type="json">
                        <format>
							{&#xd;
							"message":"$1",&#xd;
							"detail":"$2"&#xd;
							}
                        </format>
                        <args>
                            <arg value="Could not send notification"/>
                            <arg evaluator="xml" expression="fn:concat('Notification channel ', $ctx:notification-channel, ' does not exist')"/>
                        </args>
                    </payloadFactory>
                </default>
            </switch>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <payloadFactory description="Payload Error" media-type="json">
                <format>
					{&#xd;
					"message":$1,&#xd;
					"code":$2,&#xd;
					"detail":$3,&#xd;
					"exception":$4&#xd;
					}
                </format>
                <args>
                    <arg evaluator="xml" expression="$ctx:ERROR_MESSAGE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_CODE"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_DETAIL"/>
                    <arg evaluator="xml" expression="$ctx:ERROR_EXCEPTION"/>
                </args>
            </payloadFactory>
            <respond description="Respond Error"/>
        </faultSequence>
    </resource>
</api>
